Application
===========
No application.config.php ficam definidos os módulos que serão usados na aplicação.
Como o Zend Framework 2 é modularizado, módulos de terceiros podem ser facilmente acoplados ao projeto.


Módulos
=======
Definição: Módulos são agrupamentos de códigos que podem ser facilmente incluídos em qualquer projeto, sendo totalmente desacoplados. Podemos criar aqui um módulo Admin totalmente genérico e usá-lo em qualquer projeto que criarmos no futuro, como um CMS ou um fórum.


module.config.php
-----------------
Nesse arquivo nós definimos várias configurações do módulo. Ele retorna um array(). 
Configurado separadamente do module.php, segundo WW, para que esse não fique muito grande.
Algumas configurações são as de:
- Rotas;
- Controller;
- Views;
- Doctrine: Usado para substituir a configuração do Doctrine no módulo.
- DataFixtures;
- Banco de dados;

Entity
======

Doctrine
--------
Alguns passos para a configuração do doctrine.

1. O doctrine é configurado adicionando os módulos do doctrine ao projeto no application.config.php.
- 'DoctrineModule',
- 'DoctrineORMModule',
- 'DoctrineDataFixtureModule',

2. Configuração local no autoload:
config\autoload\doctrine.local.php

3. Configuração do módulo:
modulo.config.php

4. WW executa o passo a seguir para configurar cache do doctrine.
Criação de pastas de arquivos temporários (cache):
- data\cache\DoctrineORMModule\Proxy
A pasta Proxy deve ter permissão de gravação.
Não vi essa configuração em outros tutoriais, apenas a pasta 'data' deve possuir permissão de gravação, mais nada.

Banco de dados
--------------

WW usa uma sintaxe específica para a criação das tabelas no banco, modulo_tabela. A justificativa é que se utilizarmos outros módulos, desenvolvidos por terceiros, não teremos o risco de ter uma tabela com o mesmo nome.
Ele também usa a tabela em plural, verificar se essa é um prática adotada pela comunidade.

Geração automática de código com o Doctrine
-------------------------------------------
Criação das entitys por linha de comando.
Exibe todas as opções:
php vendor/doctrine/doctrine-module/bin/doctrine-module

Exemplo:
php vendor/doctrine/doctrine-module/bin/doctrine-module orm:convert-mapping --filter="TeniluserUser" --from-database annotation module/TenilUser/src/TenilUser/Entity/

O nome da tabela do banco foi ajustado para o padrão CamelCase. teniluser_user => TeniluserUser
O exemplo acima foi testado e funciona corretamente. Foi gerado um arquivo na pasta indicada com o nome TeniluserUser.php.

Após a criação do arquivo, alguns passos foram seguidos:

1. TeniluserUser foi renomeado para User. 
2. Acionado o namespace (TenilUser\Entity).
3. O nome da classe foi renomeado para User.
4. Foi criado o método construtor para setar os valores createdAt e updatedAt, contudo, na versão atual do doctrine, esses valores são passados usando 'CURRENT_TIMESTAMP'. Acho que o construtor para fazer isso é desnecessário. Talvez essa diferença seja por que no meu banco de dados eu setei os valores default dessas colunas.
5. Geração dos códigos getters e setters.
6. Criptografia. Hash. Salt.
7. return $this; // Para interface fluida.
8. Hydrate();
9. O construtor receberá um array $options. Para fazer o hydrate.
10. Utilizar o @ORM\HasLifecycleCalbacks para atualiar o updatadAt. Executa callback no momento em que algum evento for executado.
11. Prepersiste, antes de gravar alguma coisa no banco ele executa o prepersiste.
OBSERVAÇÃO: Não configurei setUpdatedAt e setCreatedAt conforme a aula ZF2I-3.4.

Data-fixture
------------
Criação de uma classe na pasta fixture para fazer os testes com a entidade no banco de dados.
- LoadUser.php
Linha de comando:
php vendor/doctrine/doctrine-module/bin/doctrine-module data-fixture:import
Opcionalmente podemos usar
php vendor/doctrine/doctrine-module/bin/doctrine-module data-fixture:import --purge-with-truncate
Nesse caso ele zera a tabela, inclusive os auto-increments.


Criptografia
------------
use Zend\Math\Rand;
// Atribuindo o valor para o salt.
// Rand::getBytes(8, TRUE) Gera uma string de 8 caracteres.
// base64_encode converte para a base 64.
$this->salt = base64_encode(Rand::getBytes(8, TRUE));


EntityManager
-------------








Controller
==========
Sempre que houver um novo 'Controller', o mesmo deverá ser explicitamente declarado no module.config.php.


Serviços
========
Definição: Uma porção de código que pode ser facilmente usado por um controller, outro serviço ou, mais tarde, uma API.
Depois de criar um serviço, ele deve ser devidamente configurado no Module.php do módulo (getServiceConfig()).



AbstractService
---------------
Nesse caso será utilizado para fazer um CRUD básico usando EntityManager do Doctrine.

User
----
Criando uma classe para os serviços do Usuário.



FlashMessenger
==============
É uma classe que ajuda a adicionar mensagens entre um request e outro.

Views
=====
A pasta de views (view) deve ficar no mesmo nível da pasta src. Se o módulo usa CamelCase como nome, a pasta view deve usar a sintaxe camel-case, colocando-se um hífen antes da letra maiúscula e as letras maiúsculas devem ser trocadas por minúsculas.
Cada Controller que usa uma ViewModel deve ter uma view a ser chamada, seguindo as definições acima. Ainda deve haver uma pasta para cada Controller e um arquivo para cada action.
Exemplo:
view
	tenil-user 				// nome do módulo: TenilUser
		index  				// nome do controller: IndexController.php
			register.phtml 	// nome da action: registerAction()

			
			
Mail
====

Criada uma classe Mail em TenilBase para envio básico de e-mail, pode e deve ser aprimorada com exceptions.


Repositório
===========
É uma classe que agente normalmente usa para fazer consultas.
Fazer uma alteração na entidade (User).
@ORM\Entity(repositoryClass="TenilUser\Entity\UserRepository")
Criar a userRepository estendendo a Doctrine\ORM\EntityRepository, essa classe possui vários métodos por padrão.
No service, pode-se utilizar os métodos do repository para fazer buscas no banco, inclusive utilizando "métodos mágicos" - findOneByNomeDoCampo().


Rotas
=====
	As rotas sempre apontarão para um controller e uma action dentro de um namespace, independete se ela vai passar algum tipo de parâmetro ou não.


Literal
-------
	O que o nome já diz, é literal. Se uma rota é criada assim '/teste/', assim ela deve ser acessada pela url. Se tentar acessar '/teste', não vai funcionar, por que faltou a '/'.

Segment
-------
	Esse é o mais simple e mais utilizado tipo de rota do ZF2.
	Exemplo: 	'route' => '/rota/artigo/[/:id]'
				'constraints' => array('id' => '\d+')

Regex
-----
	Expressões regulares.
	Exemplo: 	'regex' => '/rota/artigo/(?P<id>\d+)'
				'spec'  => '/rota/artigo/%id%'
	Explicação: 'regex' Sempre usar (). ?P significa parâmero. <id> é o parâmetro passado na rota. \d+, só aceita um ou mais dígitos. 'spec', o que estiver dentro da % é o que ele recupera.
	No caso do uso do Regex, na declaração deve ser utilizado o nome 'regex' no lugar de 'route'.
	Acesso: /rota/artigo/15

Wildcard
--------
	É uma rota que é do tipo /chave/valor/chave/valor/chave/valor/chave/valor...
	Exemplo: 	'route'=> '/rota/artigo/'
				'key_value-delimiter' => '/'
				'param_delimiter' => '/'
	Acesso: /rota/artigo/id/15
	
Treeroute
---------
	E uma rota filha de qualquer rota.
	
	
Hostname
--------
	Subnomínios dinâmicos.
	
Scheme
------
	'scheme' => 'https'
	
Method
------
	'type' => 'method'
	'options' => 'verb'=> array(post, put)
	


	
	



