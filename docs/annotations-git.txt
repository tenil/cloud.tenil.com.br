01h51m - Clonando um repo
02h00m - SSH. Repositório remoto. Não precisa necessarimente ser o GitHub.
02h28m - Modelo distribuído, descentralizado. Github.

$ git config --list
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com
$ git config --global color.ui auto 

git help <comando>
    Obter ajuda.

git init
    Inicia o git, Cria um repositório (repo) novo.

git status
	Avalia estado dos arquivos no diretório de trabalho e no índice.

git add
	Adiciona arquivos ao índice (stage).
	
git add -f
	Adiciona arquivos ao índice (stage). Mesmo que o arquivo esteja sendo ignorado pelo .gitignore.
	
git add -i
	Modo interativo para adicionar arquivos.
	
git rem --cached
	Retira arquivo(s) novo(s) do índice.
	
git reset HEAD <arquivo>
	Retira arquivo(s) modificado(s) do índice.
	
git reset HEAD~1 [--hard | --soft]
	Volta commits ~1 volta um commit para trás.
	--hard - Apaga commits totamente
	--soft - Mantém modificação no índice

git reflog
	Mostra os commits que não estão mais acessíveis no histórico.

git merge <hash do commit>
	Traz de volta a informação do commit destrutivo.

git checkout
	Reinicia arquivo modificado fora do índice.
	
git commit -m "Mensagem"
	Grava conteúdo do índice e colola no repo.
	
git commit -m "Mensagem" --amend
	Grava conteúdo do índice no último commit, sem criar um novo commit.

git commit -a -m "Mensagem"
	A opção -a adiciona ao índice arquivos que o git conhece e que foram modificados.
	
git log
	Mostra o histórico de commits no repo.
	
git log --stat
	Mostra o histórico de commits no repo com mais informações sobre cada commit.
	
git log --graph	
	
git log --pretty=oneline

git log --pretty=format:"[%an %ad] %h - %s"
	%an: Author name
	%ad: Data
	%h:  Abreviação do hash
	%s:  Assunto

git log --pretty=format:"%h %s" --graph
	Combinação de opções
	
git log --since=30.minutes	
git log --since=1.hour	
git log --since=2.hours
git log --since=3.hours	--until=30.minutes
	
git clean -f
	Apaga arquivos do diretório de trabalho que não fazem parte do repo.
	
git stash
	Grava arquivos do índice num stash anônimo.
	
git stash save <nome>
	Grava arquivos do índice num stash descrito.
	
git stash apply <codigo>
	Aplica último stash gravado no diretório de trabalho. Opcional: código do stash.
	
git stash pop
	Aplica último stash gravado no diretório de trabalho e apaga o stash.

git stash drop <codigo>
	Apaga stash designado pelo <codigo>.
	
git stash list
	Lista os stashes gravados.
	
git stash clear
	Apaga todos os stashes gravados.
	
git branch
	Lista os branches criados.
	
git branch -a
	Lista os branches criados e também os remotos.
	
git branch -d <nome>
	Apaga branch. Com -D, apaga forçado.
	
git checkout -b <nome do novo branch>
	Cria um novo branch a partir do branch atual.
	
git checkout -b <nome do novo branch> [sha1 | tag | branch]
	Cria um novo branch a partir de um commit, um tag ou um branch que existe
	
git merge <branch>
	Mescla no branch atual a partir de outro branch.
	
git merge <branch> --squase
	Mescla no branch atual a partir de outro branch. Sem gerar commit, deixa tudo no índice antes.	
	
git rebase <branch>
	Desfaz commits atuais, trás os commits do outro branch e reaplica os commits.
	
gitk --all
	Abre a GUI de visualização de Gits
	
git clone <repo.git> <destino>
	Cria um clone do repo .git na pasta destino.
	
git remote
	Mostra o repositório original
	
git remote show <nome do repositorio>
	Ex.: git remote show origin
	
git checkout -b desenvolvimento origin/desenvolvimento
	Criando uma nova branch "desenvolvimento" a partir da branch remota "origin/desenvolvimento"
	
git push <remoto> <branch-remoto>
	Empurra os commits locais para o repo remoto na branch especificada.
	Ex. git push origin desenvolvimento.
	push: Empurrar. Empurrar para o remoto.

git remote add <nome> <url>
	Cria novo apontamento para repo remota.
	Ex. git remote add origin ../www2/.git
	
git fetch <remoto> <branch-remoto>
	Puxa novos commits do repo remoto para a branch especial <remote>/<branch>
	
git pull <remoto> <branch-remoto>
	Mesma coisa que usar primeiro 'fetch' e depois 'merge' a partir do branch remoto.
	Trazer modificação do remoto para o local.
	Ex. git pull origin desenvolvimento
	pull: Puxar. Puxar do remoto.

git remote rm <nome>
	Apaga apontamento remoto.
	Ex. git remote rm origin
	
git diff <nome> 
	Mostra as diferenças entre a branch atual e a branch <nome>.

git tag <nome>
	Cria tag apontando ao commit do branch atual.
	Ex. git tag v1.0	
	
git push <tag>
	Envia apenas a tag especificada ao repo remoto
	Ex. git push origin v1.0

git push --tags 
	Envia todas as tags ao repo remoto
	
Voltando no tempo
	Para voltar os arquivos para um momento de um commit anterior.
	git checkout -b <nome> <número do sha-1>
	
Trabalhando remotamente
	Cria-se um diretório para os seus repositórios.
	Ex. repos
	Cria-se um diretório para o seu repositório.
	Ex. repos/eleitor.git

git init --bare
	Uso no servidor remoto. Usando SSH.
	A opção --bare cria o que estaria dentro do diretório .git no diretório atual.
	Então dentro de 'repos/eleitor.git' usa-se 'git init --bare' para criar a estrutura de um diretório .git.
	
O que devo fazer para 2 ou mais usuários possam entrar nesse sistema.
	Devo ter um diretório .ssh. Uma convenção do ssh é que existe um arquivo chamado authorized_keys que contem a chave publica do usuário.
	Ver 2h03m para colocar a chave pública dentro do arquivo authorized_keys.
	Ex. echo "ssh-rsa alsdkfjalfk"
	>> authorized_keys
	
	Agora pode-se usar realmente o repositório remoto.
	Ex. git remote add origin usuario@servidor.com:repos/eleitor.git
	- usuario: é o usuário configurado no servidor.
	- servidor: é o servidor domínio ou IP.
	- repos/eleitor.git é o diretório no servidor remoto dentro da do diretório do usuário.
	
	Sincronizando a branch master com o servidor remoto.
	git push origin master
	
Modelo centralizado
	Um servidor centralizado. Dois usuários.
	
	O procedimento correto é: 2h19m
	
	Uma das formas de trabalhar com git é ter um repositório central.
	Repositório Central
		|- Clone local 1
		|- Clone local 2
		|- Clone local 3
	
Trabalhando com Subversion SVN
	Cenário: a empresa exige o uso do Subversion e não o git.
	É possível usar git com subversion.
	
git svn	clone <url>
	Faz clone do histórico inteiro de um repositório Subversion.
	
git svn dcommit
	Envia os commits ao servidor Subversion.
	
git svn fetch
	Trás os últimos commits do repo Subversion.
	
Algumas referências
	Scott Chacon - Evangelista do Git.
	whygitisbetterthanx.com -> git-scm.com/about
	git-scm.com
	book.git-scm.com -> git-scm.com/book
	gitcasts.com -> Aparentemente não existe mais
	progit.org/book -> git-scm.com/book
	
	